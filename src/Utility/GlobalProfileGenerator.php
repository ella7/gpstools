<?php

namespace App\Utility;

class GlobalProfileGenerator
{

  // TODO: allow output path to be specified - at some point, this should overwrite the actual
  // profile file.
  public static function generateProfile($output_path = null)
  {
    $path = dirname(__FILE__).'/profile.py';
    $output_path = $output_path ? $output_path : dirname(__FILE__).'/profile.php.txt';

    $file_contents = file_get_contents($path);
    $file_contents = str_replace(self::blockTextToRemove(),'',$file_contents);

    foreach (self::replacments() as $replacement) {
      $file_contents = str_replace($replacement['replace'],$replacement['with'],$file_contents);
    }
    $file_contents = self::headerTextToInsert() . $file_contents . "}\n";

    file_put_contents($output_path, $file_contents);
  }

  public static function replacments()
  {
    return [
      // ['replace' => "\n",                         'with' => "\n  "],
      ['replace' => '{',                          'with' => '['],
      ['replace' => '}',                          'with' => ']'],
      ['replace' => 'FIELD_TYPES = [',            'with' => 'const FIELD_TYPES = ['],
      ['replace' => ': FieldType(',               'with' => ': ['],
      ['replace' => 'SubField(',                  'with' => '['],
      ['replace' => 'ReferenceField(',            'with' => '['],
      ['replace' => 'ComponentField(',            'with' => '['],
      ['replace' => 'Field(',                     'with' => '['],
      ['replace' => 'MessageType(',               'with' => '['],
      ['replace' => '),',                         'with' => '],'],
      ['replace' => 'BASE_TYPES[0x',              'with' => 'self::BASE_TYPES[0x'],
      ['replace' => 'name=\'',                    'with' => '\'name\' => \''],
      ['replace' => 'base_type=',                 'with' => '\'base_type\' => '],
      ['replace' => 'values=',                    'with' => '\'values\' => '],
      ['replace' => ': \'',                       'with' => ' => \''],
      ['replace' => ': [',                        'with' => ' => ['],
      ['replace' => 'FIELD_TYPE_TIMESTAMP =',     'with' => 'const FIELD_TYPE_TIMESTAMP ='],
      ['replace' => 'MESSAGE_TYPES =',            'with' => 'const MESSAGE_TYPES ='],
      ['replace' => '\'s\')',                     'with' => '\'s\'];'], // hackish for FIELD_TYPE_TIMESTAMP line
      ['replace' => "]\n",                        'with' => "];\n"],
      ['replace' => 'type=FIELD_TYPES',           'with' => '\'type\' => self::FIELD_TYPES'],
      ['replace' => 'def_num=',                   'with' => '\'def_num\' => '],
      ['replace' => 'units=',                     'with' => '\'units\' => '],
      ['replace' => 'subfields=(',                'with' => '\'subfields\' => ['],
      ['replace' => 'ref_fields=(',               'with' => '\'ref_fields\' => ['],
      ['replace' => 'components=(',               'with' => '\'components\' => ['],
      ['replace' => 'fields=',                    'with' => '\'fields\' => '],
      ['replace' => 'mesg_num=',                  'with' => '\'global_number\' => '],
      ['replace' => 'raw_value=',                 'with' => '\'raw_value\' => '],
      ['replace' => 'value=',                     'with' => '\'value\' => '],
      ['replace' => 'type=',                      'with' => '\'type\' => '],
      ['replace' => 'scale=',                     'with' => '\'scale\' => '],
      ['replace' => 'bit_offset=',                'with' => '\'bit_offset\' => '],
      ['replace' => 'offset=',                    'with' => '\'offset\' => '],
      ['replace' => 'accumulate=',                'with' => '\'accumulate\' => '],
      ['replace' => 'bits=',                      'with' => '\'bits\' => '],
      ['replace' => '253: FIELD_TYPE_TIMESTAMP',  'with' => '253 => self::FIELD_TYPE_TIMESTAMP'],
      ['replace' => '\'mesg_num\'',               'with' => '\'global_number\'']

    ];
  }

  public static function blockTextToRemove()
  {
    return <<<'EOD'

    # ***************** BEGIN AUTOMATICALLY GENERATED FIT PROFILE ******************
    # *************************** DO NOT EDIT THIS FILE ****************************
    # ************ EXPORTED PROFILE FROM SDK VERSION 20.8 ON 2019-03-05 ************
    # ********* PARSED 161 TYPES (2985 VALUES), 85 MESSAGES (1038 FIELDS) **********

    from fitparse.records import (
        ComponentField,
        Field,
        FieldType,
        MessageType,
        ReferenceField,
        SubField,
        BASE_TYPES,
    )


    FIELD_NUM_TIMESTAMP = 253



    EOD;

  }

  public static function headerTextToInsert()
  {
    return <<<'EOD'
        <?php
        /**
         * The file contains the definitions for all field and message types as definied
         * by the Garmin FIT SDK v20.8. The file was ported manually to PHP from
         * dtcooper/python-fitparse/fitparse/profile.py
         *
         * TODO: This was converted manually - this would need to be fixed if it's used long term
         * TODO: Look at how much memory/time is consumed hanging onto what is effectively a big lookup table
         */

        namespace App\Model\FIT;

        class GlobalProfile2 {

          const BASE_TYPES = [
            0x00 => ['name' => 'enum',    'identifier' => 0x00, 'invalid_value' => 0xFF],
            0x01 => ['name' => 'sint8',   'identifier' => 0x01, 'invalid_value' => 0x7F],
            0x02 => ['name' => 'uint8',   'identifier' => 0x02, 'invalid_value' => 0xFF],
            0x83 => ['name' => 'sint16',  'identifier' => 0x83, 'invalid_value' => 0x7FFF],
            0x84 => ['name' => 'uint16',  'identifier' => 0x84, 'invalid_value' => 0xFFFF],
            0x85 => ['name' => 'sint32',  'identifier' => 0x85, 'invalid_value' => 0x7FFFFFFF],
            0x86 => ['name' => 'uint32',  'identifier' => 0x86, 'invalid_value' => 0xFFFFFFFF],
            0x07 => ['name' => 'string',  'identifier' => 0x07, 'invalid_value' => null],
            0x88 => ['name' => 'float32', 'identifier' => 0x88, 'invalid_value' => null],
            0x89 => ['name' => 'float64', 'identifier' => 0x89, 'invalid_value' => null],
            0x0A => ['name' => 'uint8z',  'identifier' => 0x0A, 'invalid_value' => 0x0],
            0x8B => ['name' => 'uint16z', 'identifier' => 0x8B, 'invalid_value' => 0x0],
            0x8C => ['name' => 'uint32z', 'identifier' => 0x8C, 'invalid_value' => 0x0],
            0x0D => ['name' => 'byte',    'identifier' => 0x0D, 'invalid_value' => null],
            0x8E => ['name' => 'sint64',  'identifier' => 0x8E, 'invalid_value' => 0x7FFFFFFFFFFFFFFF],
            0x8F => ['name' => 'uint64',  'identifier' => 0x8F, 'invalid_value' => 0xFFFFFFFFFFFFFFFF],
            0x90 => ['name' => 'uint64z', 'identifier' => 0x90, 'invalid_value' => 0],
          ];



        EOD;
  }

}
